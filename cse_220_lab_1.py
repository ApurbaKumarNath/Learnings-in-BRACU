# -*- coding: utf-8 -*-
"""CSE-220 Lab-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wN7I2xjqZBcnV0DbHWmjemy8pMOWmazP

**Instructions to Follow (Failing to follow these will result mark deductions).**
1. First of all, From colab File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
2. You can not use any built-in function except len()

3. You can not use any other python collections except array (e.g: tuple, dictionaries etc.).

4. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be 4 approaches.

 i. arr = np.array([None] * 10) #Initializing an array length 10 with values None.

 ii. arr = np.array([0] * 10) #Initializing an array length 10 with values zero.

 iii. arr = np.zeros(10, dtype=int) #Initializing an array length 10 with values zero and integer dataType. By default, dtype is float.

 iv. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

"""You will see the status Accepted after completion if your code is correct.

If your function is wrong you will see wrong [correction percentage]

Do not change the driver code statements. You can only change the input values to test your code.
"""

#You must run this cell to print matrix and for the driver code to work
def print_matrix(m):
  row,col = m.shape
  for i in range(row):
    c = 1
    print('|', end='')
    for j in range(col):
      c += 1
      if(len(str(m[i][j])) == 1):
        print(' ',m[i][j], end = '  |')
        c += 6
      else:
        print(' ',m[i][j], end = ' |')
        c += 6
    print()
    print('-'*(c-col))
print_matrix(np.array([[10,20,30],[40,50,60],[70,80,90]]))

#Task 01: Merge Lineup

def mergeLineup(pokemon_1, pokemon_2):
    if len(pokemon_1)!=len(pokemon_2):
        return "Merging no Possible"
    new_lineup=np.zeros(len(pokemon_1), dtype=int)
    i=0
    j=len(pokemon_2)-1
    while i<len(pokemon_1):
        if pokemon_1[i]==None:
            pokemon_1[i]=0
        if pokemon_2[j]==None:
            pokemon_2[j]=0


        new_lineup[i]=pokemon_1[i]+pokemon_2[j]
        i+=1
        j-=1
    return new_lineup

print("///  Task 01: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12,3,28,-8,5]))
pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

# Task 02: Discard Cards

def discardCards(cards, t):
    count=0
    i=0
    while i<len(cards):
        if cards[i]==t:
            if (count % 2)==0:
                cards[i]=0

            count+=1
        i+=1
    j=0
    def shift(cards,index,checker=0):
        j=index
        while j<len(cards)-1:
            cards[j]=cards[j+1]
            j+=1
        cards[len(cards)-1]=0


    while j< len(cards):
        if cards[j]==0:
            shift(cards,j)
        j+=1

    return cards



print("///  Task 02: Discard Cards  ///")
cards = np.array([1,3,7,2,5,2,2,2,0])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1,3,7,5,2,2,0,0,0]
unittest.output_test(returned_value, np.array([1,3,7,5,2,2,0,0,0]))

cards = np.array([5,5,5,0,0])
returned_value = discardCards(cards, 5)
print(f'Task 2: {returned_value}') # This should print [5,0,0,0,0]
unittest.output_test(returned_value, np.array([5,0,0,0,0]))

#Task 03: Decryption Process

def decrypt_matrix(matrix):
    row,col=matrix.shape
    de_mat=np.array([0]*(col-1))
    c=0
    while c < col-1:
        r=0
        while r < row:
            de_mat[c]+= matrix[r][c+1]-matrix[r][c]
            r+=1
        c+=1
    return de_mat

matrix=np.array([[1,3,1],
                 [6,4,2],
                 [5,1,7],
                 [9,3,3],
                 [8,5,4]
                 ])

returned_array=decrypt_matrix(matrix)
print(returned_array)
#This should print [-13, 1]

# Task 04: Zigzag Walk

def walk_zigzag(floor):
    row,col=floor.shape
    # sequence_matrix=np.zeros((col, (row+1)//2), dtype=str)
    c=0
    r=0
    sm_r=0
    while c<col:
        sm_c=0
        if r==0:

            while r<row:
                if r%2==0:
                    print(floor[r][c], end=" ")
                    # sequence_matrix[sm_r][sm_c]=floor[r][c]
                    # sm_c+=1
                r+=1
        else:
            while r>=0:
                if r%2!=0:
                    print(floor[r][c], end=" ")
                    # sequence_matrix[sm_r][sm_c]=floor[r][c]
                    # sm_c+=1
                r-=1
        print()
        # sm_r+=1
        c+=1
        if r<0:
            r=0
        elif r==row:
            r=row-1
    # print(sequence_matrix)



floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0'],
                  ['1' , '4' , '2' , '8' , '6']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9 1
# 1 2
# 4 7 2
# 4 9
# 1 8 6
print('################')
floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9
# 1 2
# 4 7
# 4 9
# 1 8

from re import S
# Task 05: Row Rotation Policy of BRACU Classroom
def row_rotation(exam_week, seat_status):

# Defining the The Row Rotatation Function That rotates the row of a Matrix once
    def rotate_once(seat_status):
        row,col=seat_status.shape

        temp=np.zeros(col,dtype= object )

        r=row-1
        c=0
        while r==row-1 and c<col:

                temp[c]=seat_status[r][c]
                c+=1

        for r in range(row-1,0,-1):
            c=0
            while c<col:

                seat_status[r][c]=seat_status[r-1][c]
                c+=1



        c=0
        r=0
        while c< col:
            seat_status[r][c]=temp[c]
            c+=1


    rotate=1
    while rotate<exam_week:
        rotate_once(seat_status)
        rotate+=1

    print_matrix(seat_status)

    def search_frd(seat_status,friend):
         row,col=seat_status.shape
         i=0
         while i<row:
            j=0
            while j<col:
                if seat_status[i][j]==friend:
                    temp= i+1
                    return temp
                j+=1
            i+=1

    return search_frd(seat_status, "AA")




seat_status = np.array([[ 'A' , 'B' , 'C' , 'D' , 'E'],
                  ['F' , 'G' , 'H' , 'I' , 'J'],
                  ['K' , 'L' , 'M' , 'N' , 'O'],
                  ['P' , 'Q' , 'R' , 'S' , 'T'],
                  ['U' , 'V' , 'W' , 'X' , 'Y'],
                  ['Z' , 'AA' , 'BB' , 'CC' , 'DD']])
exam_week=3
print_matrix(seat_status)
print()
row_number=row_rotation(exam_week, seat_status) #This should print modified seat status after rotation
print(f'Your friend AA will be on row {row_number}') #This should print Your friend AA will be on row 2

#Task 06: Matrix Compression
import math
def compress_matrix(mat):
    row,col=mat.shape
    # if math.log(row)/math.log(2)!=int:
    #     return "Matrix Compression not possible"
    com_mat=np.zeros((2,2), dtype=int)
    r=0
    i=0

    while r<row:

        c=0
        j=0
        while c<col:
            com_mat[i][j] = mat[r][c]+mat[r][c+1]+mat[r+1][c]+mat[r+1][c+1]
            c+=2
            j+=1

        i+=1
        r+=2


    return com_mat
matrix=np.array([[1,2,3,4],
                 [5,6,7,8],
                 [1,3,5,2],
                 [-2,0,6,-3]
                 ])
print_matrix(matrix)
print("...............")
returned_array=compress_matrix(matrix)
print_matrix(returned_array)
#This should print

#|  14  |  22 |
#--------------
#|  2  |  10  |
#--------------

#Task 07: Game Arena)

def play_game(arena):
    row,col=arena.shape
    r=0
    sum=0
    while r<row:
        c=0
        while c<col:

            if arena[r][c]%50==0 and arena[r][c]!=0:

                if r+1 <row and arena[r+1][c]==2:
                    sum+=arena[r+1][c]

                if r-1>=0 and arena[r-1][c]==2:
                    sum+=arena[r-1][c]

                if c+1<col and arena[r][c+1]==2:
                    sum+=arena[r][c+1]

                if c-1>=0 and arena[r][c-1]==2:
                    sum+=arena[r][c-1]

            c+=1

        r+=1
    if sum>10:
        print(f"Points Gained: {sum}. Your team has survived the game.")
    else:
        print(f"Points Gained: {sum}. Your team is out.")


arena=np.array([[0,2,2,0],
                [50,1,2,0],
                [2,2,2,0],
                [1,100,2,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 6. Your team is out.

print(".....................")
arena=np.array([[0,2,2,0,2],
                [1,50,2,1,100],
                [2,2,2,0,2],
                [0,200,2,0,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 14. Your team has survived the game.



